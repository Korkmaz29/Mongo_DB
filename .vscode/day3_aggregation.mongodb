////==================================================================================
////                                  AGGREGATION
////==================================================================================
// 1) Aggregation, dokumanlardaki verilerin islenmesi ve hesaplanan 
//    sonuclarin donmesini saglayan islemlerdir. 
//
// 2) Aggregation islemleri, farklı dokumanlardaki degerleri gruplandirabilir.
//
// 3) Bu gruplanan veriler uzerinde cesitli islemlerin gereceklestirelerek tek 
//    bir sonuc degerinin donmesi saglanabilir.
//
//  4) MongoDB, 3 farklı yontem ile aggregation gerceklestirmeye izin verir.
//     A) aggregation pipeline (toplama boru hattı)
//     B) map-reduce function (map indirgeme)
//     C) single-purpose aggregation (tek-amaç toplama)
//
//  5) Aggregiation, SQL'deki Join islemlerine benzetilebilir. 
//
//     SQL         MONGO
//----------------------
//     WHERE       $match
//     GROUP BY 	 $group
//     HAVING	     $match
//     SELECT	     $project
//     ORDER BY    $sort
//     LIMIT	     $limit
//     SUM()	     $sum
//     COUNT()	   $count, $sum
//     JOIN	       $lookup
//     MERGE 	     $merge (MongoDB 4.2 ve sonrasi)
////aggregation (sum,max,avg vs) yaparken bi field (column) kullanacaksak syntax ı ==> "$urunAdi" şeklinde===================================================================
​
///==================================================================================
////                          AGGREGATION PIPELINE
////==================================================================================
// SYNTAX
// 
//   pipeline = [
 //   { $match : { … },
 //   { $group : { … },
 //   { $sort : { … },
//      ...
//   ]
//   db.collectionName.aggregate(pipeline, options)
//
//  $match() – Verileri secerken flitrelemek icin
//  $group({_id : "$field"}) - islenen verilerin grupplanmasi icin 
//  $sort()  Sonuclarin siralanmasi icin
​
////---------------------------------------------------------------------------------
//// 1) "KISILER" veritabaninda "ogrenciler" collection'i tanimlayalim. 
////---------------------------------------------------------------------------------
​
use("KISILER")
//db.ogrenciler.find()
//  db.people.drop();
 //db.createCollection("ogrenciler")
// use("kisiler");
// db.createCollection("ogrenciler");
​
// //---------------------------------------------------------------------------------
// // 2) asagidaki dokumanlari collection'a kaydedelim.   
// //---------------------------------------------------------------------------------

use("KISILER")
db.ogrenciler.insertMany([
{"isim": "Tarik ", "yas":57, "sube": "A", "not":97, "dersler":["fizik", "mat"]}, 
{"isim": "Selim", "yas":37, "sube": "A","not":77,},
{"isim": "Nalan", "yas":17, "sube": "B","not":55, "dersler":["fizik", "ingilizce"]},
{"isim": "Burhan", "yas":21, "sube": "B","not":43, "dersler":["fizik", "mat"]},
{"isim": "Niyazi", "yas":40, "sube": "B","not":99, "dersler":["ingilizce"]},
{"isim": "Galip", "yas":37, "sube": "A","not":34, "dersler":["ingilizce"]},
{"isim": "Teslime", "yas":24, "sube": "A","not":88, "dersler":["mat","fizik","kimya"]}]);

// 3/ dersleri sadece ingilizce yası 50den kucuk olan ogrencileri sorgulama

use("KISILER")
db.ogrenciler.find({dersler:["ingilizce"], yas:{$lt:50}});

use("KISILER")
db.ogrenciler.aggregate({$match:{dersler:["ingilizce"], yas:{$lt:50}}});

//4) B-subesindeki ogrenci sayısını hesaplayan sorguyu yazınız
//saymak için match metodunun yanında count kullanılabilir. syntaxında countun yanonda bilgi verilmesi zorunludur.
use("KISILER")
db.ogrenciler.aggregate({$match:{sube:"B"}},{$count:"B Şubesindeki ogrenci sayısı"});

/// 5) Tum subelerdeki toplam ogrenci sayisini hesaplayan sorguyu yaziniz.
////    count bir grup icin 1 sayisinin donmesini ve bunlarin toplanmasini saglar.
// count:tek sonuç ,mesela B sınıfındaki.....ler..
// sum:A daki...ler, B deki...ler birer birer toplanır
////---------------------------------------------------------------------------------
 ////    NOT: Group isleminde degiskenlerin onune $ isareti konulmalidir.
 //  id den sonra dersler, not vs de olabilir, 
 //burada şubeye göre grupla=$group:{_id:"$sube"}}
use("KISILER")
db.ogrenciler.aggregate({$group:{_id:"$sube",toplamOgrenci:{$sum:1}}})


//6) tüm şubelerdeki toplam ogrenci sayılarını ve her subedeki max notu hesaplayan sorguyu yazınız

use("KISILER")
db.ogrenciler.aggregate({$group:{_id:"$sube", toplamOgrenci:{$sum:1}, maxNot:{$max:"$not"}}})

//7) yaşı 30dan kucuk olanların subelere gore not ortalaması yazan sorgulamayı yazınız
use("KISILER")
db.ogrenciler.aggregate([{$match:{yas:{$lt:30}}},{$group:{_id:"$sube", ortalamaNot:{$avg:"$not"}}}])

//8) Ingilizce dersini alanların subelere göre sayılarını hesaplayan sorguyu yazınız

use("KISILER")
db.ogrenciler.aggregate([{$match:{dersler:"ingilizce"}},{$group:{_id:"$sube",ingilizceAlanlarınSayisi:{$sum:1}}}])


//9) sadece fizik ve matematik dersini alanların subelere gore sayısı

use("KISILER")
db.ogrenciler.aggregate([{$match:{dersler:["fizik","mat"]}},{$group:{_id:"$sube", fizikMatAlanlarınSayisi:{$sum:1}}}])


//10)fizik VEYA mat  alanlar
use("KISILER")
db.ogrenciler.aggregate([{$match:{dersler:{$in:["fizik,"mat"]}}},{$group:{_id:"$sube", fizikMatAlanlarınSayisi:{$sum:1}}}])